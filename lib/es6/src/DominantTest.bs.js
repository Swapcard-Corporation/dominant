// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Jest              from "bs-jest/lib/es6/src/jest.js";
import * as Dominant$Dominant from "./Dominant.bs.js";

describe("Pixel.ofCharArray", (function () {
        Jest.test("an empty array should return an empty list", (function () {
                return Jest.ExpectJs[/* toEqual */12](/* array */[], Jest.ExpectJs[/* expect */0](Dominant$Dominant.ofFloatArray(/* float array */[])));
              }));
        Jest.test("a partial array should return an empty list", (function () {
                return Jest.ExpectJs[/* toEqual */12](/* array */[], Jest.ExpectJs[/* expect */0](Dominant$Dominant.ofFloatArray(/* float array */[1])));
              }));
        Jest.test("a 4 char array should return a unique pixel list", (function () {
                return Jest.Expect[/* toEqual */12](/* array */[Dominant$Dominant.ofColor(1, 1, 1, 1)], Jest.Expect[/* expect */0](Dominant$Dominant.ofFloatArray(/* float array */[
                                    1,
                                    1,
                                    1,
                                    1
                                  ])));
              }));
        Jest.test("a 5 char array should return a unique pixel list", (function () {
                return Jest.Expect[/* toEqual */12](/* array */[Dominant$Dominant.ofColor(1, 1, 1, 1)], Jest.Expect[/* expect */0](Dominant$Dominant.ofFloatArray(/* float array */[
                                    1,
                                    1,
                                    1,
                                    1,
                                    1
                                  ])));
              }));
        return Jest.test("a 8 char array should return a 2 pixel list", (function () {
                      return Jest.Expect[/* toEqual */12](/* array */[
                                  Dominant$Dominant.ofColor(1, 1, 1, 1),
                                  Dominant$Dominant.ofColor(1, 1, 1, 1)
                                ], Jest.Expect[/* expect */0](Dominant$Dominant.ofFloatArray(/* float array */[
                                          1,
                                          1,
                                          1,
                                          1,
                                          1,
                                          1,
                                          1,
                                          1,
                                          1
                                        ])));
                    }));
      }));

describe("Pixel.bucket", (function () {
        return Jest.test("return main colors", (function () {
                      var pixelA = Dominant$Dominant.ofColor(50, 50, 50, 1);
                      var pixelB = Dominant$Dominant.ofColor(40, 40, 40, 1);
                      var pixelC = Dominant$Dominant.ofColor(80, 80, 50, 1);
                      var pixelD = Dominant$Dominant.ofColor(148, 148, 148, 1);
                      var pixelArray = /* array */[
                        pixelA,
                        pixelB,
                        pixelC,
                        pixelD
                      ];
                      return Jest.Expect[/* toEqual */12](/* array */[
                                  Dominant$Dominant.ofColor(45.27692569068709, 45.27692569068709, 45.27692569068709, 1),
                                  Dominant$Dominant.ofColor(118.96217886370441, 118.96217886370441, 110.46266337545913, 1)
                                ], Jest.Expect[/* expect */0](Dominant$Dominant.paletteOfPixelArray(pixelArray, /* Some */[1], /* () */0)));
                    }));
      }));

export {
  
}
/*  Not a pure module */
